@mixin font-face($font-family, $url, $weight: normal, $style: normal, $asset-pipeline: false) {
	@font-face {
		font-family: '#{$font-family}';
		font-weight: #{$weight};
		font-style: '#{$style}';

		src: url('#{$url}.eot');
		src: url('#{$url}.eot?#iefix') format('embedded-opentype'),
		url('#{$url}.woff') format('woff'),
		url('#{$url}.ttf') format('truetype');

	}
}

@mixin blockWithBg($srcImg) {
	.page__title {
        margin-bottom: 20px;
    }

    background-color: #f0f0f0;

    .header {
        background-color: rgba(#fff, 0.95);
    }

    .parking {
        &::before {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 70%;
            z-index: 1;
            background: linear-gradient(90deg, rgba(0, 0, 0, 0.85) 0%, rgba(0, 0, 0, 0) 100%);

            @include to(770px) {
                width: 100%;
				background: rgba(#000, 0.7);
            }
        }

        color: #fff;

        .office-block__content {
            display: flex;
            align-items: center;
            max-width: 380px;

            @include to(1440px) {
                max-width: 332px;
            }
        }

        .complex-name__bg {
            background: url($srcImg) no-repeat center/cover;
        }
    }
}

@mixin placeholder () {
	&::-webkit-input-placeholder {@content}
	&:-moz-placeholder           {@content}
	&::-moz-placeholder          {@content}
	&:-ms-input-placeholder      {@content}  
  }

// Function for converting a px based font-size to rem.
@function rem($size) {
	$remSize: $size / 14px;
	@return #{$remSize}rem;
}

@mixin toh($max_height) {
	@media screen and (max-height: $max_height) {
		@content;
	}
}


@function max($numbers...) {

	@return m#{a}x(#{$numbers})
}

;

@function min($numbers...) {

	@return m#{i}n(#{$numbers})
}

;


$full-width: 1920;
$work-width: 80;
$screen-height: 970;

@function vmax($pixels, $context: $full-width) {
  @return #{($pixels/$context)* 100}vmax
};



@function vw($pixels, $context: $full-width) {
  @return #{($pixels/$context)* 100}vw
};

@function vh($pixels, $mult: 1) {
  @return #{(($pixels/$screen-height) * $mult) * 100}vh
};

@function lh($lh, $fz) {
  @return #{($lh/$fz)}em
}